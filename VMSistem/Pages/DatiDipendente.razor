@page "/DatiDipendente"
@using MudBlazor

<MudGrid Justify="Justify.Center">
    <MudItem xs="3">
        <MudImage Src="ccrelogo.png" Width="250" Height="80" ObjectFit="ObjectFit.Fill" />
    </MudItem>
</MudGrid>
<MudCard Style="margin-top:0px;">

    <MudCardContent>
        <MudForm>
            <MudAutocomplete T="string" Label="In Visita Con " @bind-Value="value2" SearchFunc="@Search2"
                             ResetValueOnEmptyText="true"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <br />
            <br />
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowRightAlt" Label="Procedi" OnClick="@next" />
                </MudItem>
            </MudGrid>

        </MudForm>


    </MudCardContent>

</MudCard>
@code {
    private string  value2;
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string[] Nomi ={"davide Ph","Romeo borghi","Romeo secondo","luca miari" };
     @inject ISnackbar snackBar;

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return Nomi.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    public void next()
    {
         
    }
}
