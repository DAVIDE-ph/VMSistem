@page "/DatiDipendente"
@using VMSistem.Class;
@using Microsoft.Data.SqlClient;

<MudGrid Justify="Justify.Center">
    <MudItem xs="3">
        <MudImage Src="ccrelogo.png" Width="250" Height="80" ObjectFit="ObjectFit.Fill" />
    </MudItem>
</MudGrid>
<MudCard Style="margin-top:0px;">

    <MudCardContent>
        <MudForm>
            <MudAutocomplete T="string" Label="In Visita Con " @bind-Value="value2" SearchFunc="@Search2"
                             ResetValueOnEmptyText="true"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <br />
            <br />
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Print" Label="@procedi" OnClick="@next" />
                </MudItem>
            </MudGrid>

        </MudForm>


    </MudCardContent>

</MudCard>
@code {
    @inject ISnackbar snackBar;
    @inject NavigationManager navigationManager;
    public string procedi { get; set; }
    private string value2;
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string[] Nomi;
    public int Nemployees=0;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        procedi = "Print";
        EmployeeCount();
        LoadEmployee();

    }
    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];

        return Nomi.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    public void next()
    {
        if (!string.IsNullOrEmpty(value2))
        {
            bool trovato=false;
            foreach(var item in Nomi)
            {
                if(item==value2)
                {
                    trovato = true;
                    Gval.Invisita = value2;
                    Insert();
                }
            }
            if (trovato==false)
            {
                snackBar.Add("Verifica nome");
            }
            else
            {
                
            }
        }
        else
        {
            snackBar.Add("Attenzione nome selezionato non è corretto", Severity.Warning);
        }
    }

    private void Insert()
    {
        string SQLconn1 = "Server=217.198.132.7;Database=VMSystem;TrustServerCertificate=True;User Id=sa;Password=Datovarme13@;Encrypt=False;";
        SqlConnection conn = new SqlConnection(SQLconn1);

        try
        {
            conn.Open();
            string s1 = "Insert into Visitors (Nome,Cognome,Invisita,Ingresso) values (@Nome,@Cognome,@Invisita,@Ingresso)";
            SqlCommand cmd = new SqlCommand(s1, conn);
            cmd.Parameters.AddWithValue("@Nome", Gval.Nomevisitor);
            cmd.Parameters.AddWithValue("@Cognome", Gval.Cognomevisitor);
            cmd.Parameters.AddWithValue("@Invisita", Gval.Invisita);
            cmd.Parameters.AddWithValue("@Ingresso", DateTime.Now);
            cmd.ExecuteNonQuery();
            snackBar.Add("Attendere la stampa", Severity.Success);
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            snackBar.Add("errore" + ex.Message, Severity.Error);
        }
        finally
        {
            conn.Close();
        }
    }

    public void EmployeeCount()
    {
        string SQLconn1 = "Server=217.198.132.7;Database=VMSystem;TrustServerCertificate=True;User Id=sa;Password=Datovarme13@;Encrypt=False;";
        SqlConnection conn = new SqlConnection(SQLconn1);

        try
        {
            conn.Open();
            string s1 = "select count(id)  totale from employees";
            SqlCommand cmd = new SqlCommand(s1,conn);
            SqlDataReader rd = cmd.ExecuteReader();
            if(rd.Read())
            {
                Nemployees = Convert.ToInt32(rd.GetValue(0).ToString());
            }
        }
        catch (Exception ex)
        {

            snackBar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            conn.Close();
        }
    }


    public void LoadEmployee()
    {
        string SQLconn1 = "Server=217.198.132.7;Database=VMSystem;TrustServerCertificate=True;User Id=sa;Password=Datovarme13@;Encrypt=False;";
        SqlConnection conn = new SqlConnection(SQLconn1);
        string[] test = new string[Nemployees];
        try
        {
          
            conn.Open();
            string s1 = "Select * from employees";
            SqlCommand cmd = new SqlCommand(s1, conn);
            SqlDataReader rd = cmd.ExecuteReader();
            int x = 0;
            while(rd.Read())
            {
               
                //names.Add(rd.GetValue(1).ToString() + " " + rd.GetValue(1).ToString());
                test[x] = rd.GetValue(1).ToString() + " " + rd.GetValue(2).ToString();
                x++;
            }
            
        }
        catch (Exception ex)
        {
            snackBar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            conn.Close();
            Nomi = test;
        }
    }

    public class EmployeeList
    {
        public string Names{ get; set; }
    }

}
